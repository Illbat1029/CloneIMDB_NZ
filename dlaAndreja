
Login_page.py вставить это
self.to_register.clicked.connect(self.page_sign)
        self.to_login_2.clicked.connect(self.page_log)
        self.bttn_register.clicked.connect(self.registration)

def page_sign(self) :
    page_to_sign(self.stackedWidget)

def page_log(self):
    page_to_login(self.stackedWidget,self.wrong_pass_repeat_reg,self.wrong_pass_reg,self.wrong_username_reg,self. worng_email_reg)
def registration(self):
    registration_function(self.stackedWidget,self.username,self.email,self.password_sign,self.reapet_passwd,self.user_or_email,self.wrong_pass_repeat_reg,self.wrong_pass_reg,self.wrong_username_reg,self. worng_email_reg)

from LoginPageFunctions import page_to_sign,page_to_login,registration_function






----------------------------------------------------------------------------------------------------------------











from PyQt5 import QtCore, QtGui, QtWidgets
from SwapPagesMainMenuFunctions import homePage , favoritePage, laterPage,histroyPage,settingsPage,IsPressSearchButton,about_film_page,back,aboutFilmFromNotHome, adminPage, moderPage
from SlideMenuFunction import slide_menu_fun
from ScoreFilmAndChangeIcon import swap_star_and_get_score1_icon,swap_star_and_get_score2_icon,swap_star_and_get_score3_icon,swap_star_and_get_score4_icon,swap_star_and_get_score5_icon,setScoreFromDataBase
from ChangenPagesOnDifferentPagesLikeHome import next_page_home, next_page_history,next_page_later, next_page_favorite, back_page_history,back_page_favorite,back_page_home,back_page_later,next_page_search,back_page_search
from PyQt5.QtWidgets import QPushButton, QLabel, QComboBox
from addFilmToFavoriteLaterWatched import addFavorite,addLater,addwatched
from SearchFilmByGenresNameIDT import searchFilm
from mainPageFunctions import addReviewToDB, setReview, editReview, changingPageInEditing, deleteReviewFromDB, changeScore,report, sendRep,changeNPage, changePPage, setCount, addFilmToDB, deleteFilmFromDB

class Main_page(object):

        self.home_button.clicked.connect(self.home)
        self.favorite_button.clicked.connect(self.favorite)
        self.watch_later_button.clicked.connect(self.later)
        self.histor_button.clicked.connect(self.history)
        self.settings_button.clicked.connect(self.settings)
        self.pushButton_6.clicked.connect(self.IsPress)
        self.back_buttn.clicked.connect(self.back_button)
        self.menu_buttn.clicked.connect(self.slide_menu)
        self.search_button.clicked.connect(self.searchFunction)
        self.adminPageBttn.clicked.connect(self.setAdminPage)
        self.next_button_home.clicked.connect(
                lambda checked, b=self.frame_where_all_films_home: self.next_page_home1(b))

        self.previos_page_button_home.clicked.connect(
                lambda checked, b=self.frame_where_all_films_home: self.back_page_home1(b))
        self.next_button_favorite.clicked.connect(
                lambda checked, b=self.frame_where_all_films_favorite: self.next_page_favorite1(b))
        self.previos_page_button_favorite.clicked.connect(
                lambda checked, b=self.frame_where_all_films_favorite: self.back_page_favorite1(b))
        self.next_button_watch_later.clicked.connect(
                lambda checked, b=self.frame_where_all_films_watch_later: self.next_page_later1(b))
        self.previos_page_button_watch_later.clicked.connect(
                lambda checked, b=self.frame_where_all_films_watch_later: self.back_page_later1(b))

        self.next_button_history.clicked.connect(
                lambda checked, b=self.frame_where_all_films_history_page: self.next_page_history1(b))
        self.previos_page_button_history.clicked.connect(
                lambda checked, b=self.frame_where_all_films_history_page: self.back_page_history1(b))

        self.next_button_history_2.clicked.connect(
                lambda checked, b=self.frame_where_all_films_searchin: self.next_page_search1(b))
        self.previos_page_button_history_2.clicked.connect(
                lambda checked, b=self.frame_where_all_films_searchin: self.back_page_search1(b))

        self.score_1_button.clicked.connect(self.swap_star_and_get_score1)
        self.score_2_button.clicked.connect(self.swap_star_and_get_score2)
        self.score_3_button.clicked.connect(self.swap_star_and_get_score3)
        self.score_4_button.clicked.connect(self.swap_star_and_get_score4)
        self.score_5_button.clicked.connect(self.swap_star_and_get_score5)
        self.add_in_favorite_bttn_2.clicked.connect(self.addInFavorite)
        self.add_in_watch_later_bttn_2.clicked.connect(self.addInLater)
        self.add_in_history_bttn_2.clicked.connect(self.addInWatched)
        self.sendReviewBttn.clicked.connect(self.addReviewTo)
        self.editReviewBttn.clicked.connect(self.changingPage)
        self.sendReviewBttn_2.clicked.connect(self.editYourReview)
        self.deleteReviewBttn.clicked.connect(self.deletingReview)
        self.previos_page_button_watch_later_2.clicked.connect(self.previosPage)
        self.next_button_watch_later_2.clicked.connect(self.nextPage)
        self.moderatorPageBttn.clicked.connect(self.setModerPage)
        self.addFilmBttn.clicked.connect(self.addFilm)
        self.removeFilmBttn.clicked.connect(self.deleteFilm)





        buttons = self.scrollArea.findChildren(QPushButton)

        for button in buttons:
                if button.objectName()[:10] == 'likeReview':
                        button.clicked.connect(lambda checked, b=button: self.likeReviews(b.objectName()))

        for button in buttons:
                if button.objectName()[:13] == 'dislikeReviwe':
                        button.clicked.connect(lambda checked, b=button: self.dislikeReviews(b.objectName()))

        for button in buttons:
                if button.objectName()[:10] == 'reportBttn':
                        button.clicked.connect(lambda checked, b=button: self.openReport(b.objectName()))

        for button in buttons:
                if button.objectName()[:10] == 'sendReport':
                        button.clicked.connect(lambda checked, b=button: self.sendReport(b.objectName()))


        buttons = self.frame_where_all_films_home.findChildren(QPushButton)

        for button in buttons:
                if button.objectName()[:9] == 'home_film':
                        button.clicked.connect(lambda checked, b=button: self.about_film(b.objectName()))


        buttons_favorite = self.frame_where_all_films_favorite.findChildren(QPushButton)
        for button in buttons_favorite:
                button.clicked.connect(lambda checked, b=button: self.about_film_favorite_page(b.objectName()))

        buttons_watched_later = self.frame_where_all_films_watch_later.findChildren(QPushButton)
        for button in buttons_watched_later:
                button.clicked.connect(lambda checked, b=button: self.about_film_later_page(b.objectName()))

        buttons_histroy = self.frame_where_all_films_history_page.findChildren(QPushButton)
        for button in buttons_histroy:
                button.clicked.connect(lambda checked, b=button: self.about_film_history_page(b.objectName()))

        buttons_search = self.frame_where_all_films_searchin.findChildren(QPushButton)
        for button in buttons_search:
                button.clicked.connect(lambda checked, b=button: self.about_film_search_page(b.objectName()))

    def home(self):
            homePage(self.stackedWidget, self.home_button, self.favorite_button, self.histor_button,
                     self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn,)

    def favorite(self):
            favoritePage(self.stackedWidget, self.home_button, self.favorite_button, self.histor_button,
                         self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn,self.frame_where_all_films_favorite,self.id_label,self.current_page_favorite,self.next_button_favorite)

    def later(self):
            laterPage(self.stackedWidget, self.home_button, self.favorite_button, self.histor_button,
                      self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn,self.frame_where_all_films_watch_later,self.id_label,self.current_page_watch_later,self.next_button_watch_later)

    def history(self):
            histroyPage(self.stackedWidget, self.home_button, self.favorite_button, self.histor_button,
                      self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn,self.frame_where_all_films_history_page,self.id_label,self.current_page_history,self.next_button_history)

    def settings(self):
            settingsPage(self.stackedWidget, self.home_button, self.favorite_button, self.histor_button,
                         self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn, self.username_sett,self.email_sett, self.id_sett,self.username_lable,self.id_label)

    def IsPress(self):
            IsPressSearchButton(self.pushButton_6, self.stackedWidget, self.searchingActosLineEdit,
                                self.searchingCountriesLineEdit, self.searchingLanguageLineEdit,
                                self.searchingRuntimeLineEdit, self.search)

    def setAdminPage(self):
            adminPage(self.stackedWidget,self.home_button, self.favorite_button, self.histor_button,
                         self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn)

    def setModerPage(self):
            moderPage(self.stackedWidget,self.home_button, self.favorite_button, self.histor_button,
                         self.settings_button, self.watch_later_button, self.pushButton_6, self.adminPageBttn, self.moderatorPageBttn)

    def addFilm(self):
           addFilmToDB(self.addFilmEdit)

    def deleteFilm(self):
            deleteFilmFromDB(self.removeFilmEdit.text())

    def about_film(self, button_name):
            self.reviewTextEdit.setText("")
            self.current_page_watch_later_2.setText("1")
            about_film_page(self.stackedWidget, button_name, self.Name_of_film_and_year_2, self.label_9,
                            self.date_country_genres_runtime_2, self.Film_foto_about_2, self.label_10,
                            self.Score_of_film_2, self.current_page_home,self.add_in_favorite_bttn_2,self.id_label,self.label_50,self.add_in_watch_later_bttn_2,self.add_in_history_bttn_2)
            setScoreFromDataBase(self.id_label, self.score_1_button, self.score_2_button, self.score_3_button,
                                 self.score_4_button, self.score_5_button ,self.Name_of_film_and_year_2,self.label_50)
            setCount(self.label_50.text(), self.reviewCount)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3,self.nameReviewer_4, self.textCommentary_4,self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2, self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)



    def about_film_favorite_page(self,button_name):
            self.current_page_watch_later_2.setText("1")

            aboutFilmFromNotHome(self.stackedWidget, button_name, self.Name_of_film_and_year_2, self.label_9,
                            self.date_country_genres_runtime_2, self.Film_foto_about_2, self.label_10,
                            self.Score_of_film_2, self.current_page_home,self.add_in_favorite_bttn_2,self.id_label,self.add_in_watch_later_bttn_2,self.add_in_history_bttn_2,self.frame_where_all_films_favorite,self.current_page_favorite,self.label_50,self.frame_4,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to)
            setScoreFromDataBase(self.id_label, self.score_1_button, self.score_2_button, self.score_3_button,
                                 self.score_4_button, self.score_5_button ,self.Name_of_film_and_year_2,self.label_50)
            setCount(self.label_50.text(), self.reviewCount)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2,
                      self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3, self.nameReviewer_4,
                      self.textCommentary_4, self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                      self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore,
                      self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview,
                      self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5,
                      self.current_page_watch_later_2.text(), self.reviewCount)
    def about_film_search_page(self,button_name):
        self.reviewTextEdit.setText("")
        aboutFilmFromNotHome(self.stackedWidget, button_name, self.Name_of_film_and_year_2, self.label_9,
                            self.date_country_genres_runtime_2, self.Film_foto_about_2, self.label_10,
                            self.Score_of_film_2, self.current_page_home,self.add_in_favorite_bttn_2,self.id_label,self.add_in_watch_later_bttn_2,self.add_in_history_bttn_2,self.frame_where_all_films_searchin,self.current_page_history_2,self.label_50,self.frame_4,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to)
        setScoreFromDataBase(self.id_label, self.score_1_button, self.score_2_button, self.score_3_button,self.score_4_button, self.score_5_button ,self.Name_of_film_and_year_2,self.label_50)
        setCount(self.label_50.text(), self.reviewCount)

        setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary,
                                       self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3,
                                       self.textCommentary_3, self.nameReviewer_4, self.textCommentary_4,
                                       self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                                       self.userReviewText,
                                       self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                                       self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4,
                                       self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3,
                                       self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(),
                                       self.reviewCount)


    def about_film_later_page(self,button_name):
        self.current_page_watch_later_2.setText("1")
        self.reviewTextEdit.setText("")
        aboutFilmFromNotHome(self.stackedWidget, button_name, self.Name_of_film_and_year_2, self.label_9,
                            self.date_country_genres_runtime_2, self.Film_foto_about_2, self.label_10,
                            self.Score_of_film_2, self.current_page_home,self.add_in_favorite_bttn_2,self.id_label,self.add_in_watch_later_bttn_2,self.add_in_history_bttn_2,self.frame_where_all_films_watch_later, self.current_page_watch_later,self.label_50,self.frame_4,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to)
        setScoreFromDataBase(self.id_label, self.score_1_button, self.score_2_button, self.score_3_button,
                                 self.score_4_button, self.score_5_button ,self.Name_of_film_and_year_2,self.label_50)
        setCount(self.label_50.text(), self.reviewCount)
        setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary,
                  self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3,
                  self.textCommentary_3, self.nameReviewer_4, self.textCommentary_4,
                  self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                  self.userReviewText,
                  self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                  self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4,
                  self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3,
                  self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(),
                  self.reviewCount)
    def about_film_history_page(self,button_name):
            self.current_page_watch_later_2.setText("1")
            self.reviewTextEdit.setText("")
            aboutFilmFromNotHome(self.stackedWidget, button_name, self.Name_of_film_and_year_2, self.label_9,
                                 self.date_country_genres_runtime_2, self.Film_foto_about_2, self.label_10,
                                 self.Score_of_film_2, self.current_page_home, self.add_in_favorite_bttn_2,
                                 self.id_label, self.add_in_watch_later_bttn_2, self.add_in_history_bttn_2,
                                 self.frame_where_all_films_history_page,self.current_page_history,self.label_50,self.frame_4,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to)
            setScoreFromDataBase(self.id_label, self.score_1_button, self.score_2_button, self.score_3_button,
                                 self.score_4_button, self.score_5_button ,self.Name_of_film_and_year_2,self.label_50)
            setCount(self.label_50.text(), self.reviewCount)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary,
                      self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3,
                      self.textCommentary_3, self.nameReviewer_4, self.textCommentary_4,
                      self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                      self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                      self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4,
                      self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3,
                      self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(),
                      self.reviewCount)
    def back_button(self):
            back(self.stackedWidget)

    def slide_menu(self):
            slide_menu_fun(self.left_menu)
            # ----------------------------------------------------------------

    def next_page_home1(self, all_button_name):
            next_page_home(self.current_page_home, all_button_name, self.next_button_home)

    def next_page_favorite1(self,all_button_name):
            next_page_favorite(self.current_page_favorite, all_button_name,self.next_button_favorite,self.id_label)

    def next_page_later1(self,all_button_name):
            next_page_later(self.current_page_watch_later, all_button_name,self.next_button_watch_later,self.id_label)

    def next_page_search1(self,all_button_name):
            next_page_search(self.current_page_history_2, all_button_name,self.next_button_history_2,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to,self.frame_4)

    def next_page_history1(self, all_button_name):
                    next_page_history(self.current_page_history, all_button_name, self.next_button_history,self.id_label)
                    # ----------------------------------------------------------------
            # ----------------------------------------------------------------

    def back_page_home1(self, all_button_name):
            back_page_home(self.current_page_home, all_button_name, self.next_button_home)

    def back_page_favorite1(self,all_button_name):
            back_page_favorite(self.current_page_favorite, all_button_name,self.next_button_favorite,self.id_label)
    def back_page_later1(self,all_button_name):
            back_page_later(self.current_page_watch_later, all_button_name,self.next_button_watch_later,self.id_label)

    def back_page_history1(self,all_button_name):
            back_page_history(self.current_page_history, all_button_name,self.next_button_history, self.id_label)

    def back_page_search1(self,all_button_name):
            back_page_search(self.current_page_history_2, all_button_name,self.previos_page_button_history_2,self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to,self.frame_4)
    def swap_star_and_get_score1(self):

            swap_star_and_get_score1_icon(self.score_1_button, self.score_2_button, self.score_3_button,
                                          self.score_4_button, self.score_5_button,self.Name_of_film_and_year_2,self.id_label)

    def swap_star_and_get_score2(self):

            swap_star_and_get_score2_icon(self.score_1_button, self.score_2_button, self.score_3_button,
                                          self.score_4_button, self.score_5_button,self.Name_of_film_and_year_2,self.id_label)

    def swap_star_and_get_score3(self):

            swap_star_and_get_score3_icon(self.score_1_button, self.score_2_button, self.score_3_button,
                                          self.score_4_button, self.score_5_button,self.Name_of_film_and_year_2,self.id_label)

    def swap_star_and_get_score4(self):

            swap_star_and_get_score4_icon(self.score_1_button, self.score_2_button, self.score_3_button,
                                          self.score_4_button, self.score_5_button,self.Name_of_film_and_year_2,self.id_label)

    def swap_star_and_get_score5(self):

            swap_star_and_get_score5_icon(self.score_1_button, self.score_2_button, self.score_3_button,
                                          self.score_4_button, self.score_5_button,self.Name_of_film_and_year_2,self.id_label)

    def addInFavorite(self):
            addFavorite(self.Name_of_film_and_year_2, self.add_in_favorite_bttn_2, self.id_label, self.add_in_watch_later_bttn_2,self.add_in_history_bttn_2)

    def addInLater(self):
            addLater(self.Name_of_film_and_year_2, self.add_in_watch_later_bttn_2,self.id_label, self.add_in_favorite_bttn_2,self.add_in_history_bttn_2)

    def addInWatched(self):
            addwatched(self.Name_of_film_and_year_2, self.add_in_watch_later_bttn_2,self.id_label, self.add_in_favorite_bttn_2,self.add_in_history_bttn_2)

    def searchFunction(self):
            searchFilm(self.searchingActosLineEdit,self.searchingLanguageLineEdit,self.searchingCountriesLineEdit,self.searchingRuntimeLineEdit,self.date_from,self.date_to,self.filter_page,self.stackedWidget,self.frame_where_all_films_searchin,self.search)

    def addReviewTo(self):
        addReviewToDB(self.id_label, self.label_50.text(), self.reviewTextEdit.toPlainText(), self.stackedWidget_2, self.userReviewText)
        self.reviewTextEdit.setText("")
        setCount(self.label_50.text(), self.reviewCount)
        setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3,self.nameReviewer_4, self.textCommentary_4,self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2, self.userReviewText,
                  self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)

    def editYourReview(self):
        editReview(self.id_label, self.label_50.text(), self.stackedWidget_2, self.reviewTextEdit_2, self.userReviewText.text())
        setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2, self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3,self.nameReviewer_4, self.textCommentary_4,self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2, self.userReviewText,
                  self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)
    def changingPage(self):
            changingPageInEditing(self.stackedWidget_2,self.reviewTextEdit_2, self.userReviewText.text())

    def deletingReview(self):
            deleteReviewFromDB(self.id_label, self.label_50.text())
            setCount(self.label_50.text(), self.reviewCount)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2,
                      self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3,self.nameReviewer_4,
                      self.textCommentary_4,self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                      self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5,
                      self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)

    def likeReviews(self, all_buttons_name):
            labels = self.scrollArea.findChildren(QLabel)
            all_labels=[]
            for button in labels:
                    if button.objectName()[:8] == 'idReview':
                            all_labels.append(button.text())

            changeScore(self.id_label, self.label_50.text(), 1, all_buttons_name, all_labels)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2,
                      self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3, self.nameReviewer_4,
                      self.textCommentary_4, self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                      self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                      self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5,
                      self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)
    def dislikeReviews(self,all_buttons_name):
            labels = self.scrollArea.findChildren(QLabel)
            all_labels=[]
            for button in labels:
                    if button.objectName()[:8] == 'idReview':
                            all_labels.append(button.text())

            changeScore(self.id_label, self.label_50.text(), -1, all_buttons_name, all_labels)
            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2,
                      self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3, self.nameReviewer_4,
                      self.textCommentary_4, self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                      self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16,
                      self.reviewScore, self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5,
                      self.idReview, self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)

    def openReport(self, all_buttons_name):
            combbox = self.scrollArea.findChildren(QComboBox)
            buttons = self.scrollArea.findChildren(QPushButton)
            comboBoxes=[]
            send_buttons=[]


            for button in combbox:
                    if button.objectName()[:14] == 'reportComboBox':
                            comboBoxes.append(button)

            for button in buttons:
                    if button.objectName()[:10] == 'sendReport':
                            send_buttons.append(button)

            report(comboBoxes, all_buttons_name, send_buttons)




    def sendReport(self,all_buttons_name):
            labels = self.scrollArea.findChildren(QLabel)
            all_labels=[]
            for button in labels:
                    if button.objectName()[:8] == 'idReview':
                            all_labels.append(button.text())
            combbox = self.scrollArea.findChildren(QComboBox)
            comboBoxes=[]
            for button in combbox:
                    if button.objectName()[:14] == 'reportComboBox':
                            comboBoxes.append(button)

            buttons = self.scrollArea.findChildren(QPushButton)
            all_buttons=[]
            for button in buttons:
                    if button.objectName()[:10] == 'sendReport':
                            all_buttons.append(button)

            sendRep(all_buttons_name, comboBoxes, all_labels, self.id_label, all_buttons)



    def nextPage(self):
            combbox = self.scrollArea.findChildren(QComboBox)
            comboBoxes=[]
            for button in combbox:
                    if button.objectName()[:14] == 'reportComboBox':
                            comboBoxes.append(button)

            buttons = self.scrollArea.findChildren(QPushButton)
            all_buttons=[]
            for button in buttons:
                    if button.objectName()[:10] == 'sendReport':
                            all_buttons.append(button)

            changeNPage(self.reviewCount, self.current_page_watch_later_2, comboBoxes, all_buttons)

            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2,
                     self.textCommentary_2, self.nameReviewer_3, self.textCommentary_3, self.nameReviewer_4,
                     self.textCommentary_4, self.nameReviewer_5, self.textCommentary_5, self.stackedWidget_2,
                     self.userReviewText,
                     self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore,
                     self.reviewScore_2, self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview,
                     self.idReview_2, self.idReview_3, self.idReview_4, self.idReview_5,
                     self.current_page_watch_later_2.text(), self.reviewCount)

    def previosPage(self):
            combbox = self.scrollArea.findChildren(QComboBox)
            comboBoxes=[]
            for button in combbox:
                    if button.objectName()[:14] == 'reportComboBox':
                            comboBoxes.append(button)

            buttons = self.scrollArea.findChildren(QPushButton)
            all_buttons=[]
            for button in buttons:
                    if button.objectName()[:10] == 'sendReport':
                            all_buttons.append(button)

            changePPage(self.reviewCount, self.current_page_watch_later_2, comboBoxes, all_buttons)

            setReview(self.id_label, self.label_50.text(), self.nameReviewer, self.textCommentary, self.nameReviewer_2, self.textCommentary_2,
                      self.nameReviewer_3, self.textCommentary_3,self.nameReviewer_4, self.textCommentary_4,self.nameReviewer_5,
                      self.textCommentary_5, self.stackedWidget_2, self.userReviewText,
                      self.frame_6, self.frame_9, self.frame_11, self.frame_13, self.frame_16, self.reviewScore, self.reviewScore_2,
                      self.reviewScore_3, self.reviewScore_4, self.reviewScore_5, self.idReview, self.idReview_2, self.idReview_3,
                      self.idReview_4, self.idReview_5, self.current_page_watch_later_2.text(), self.reviewCount)





import res